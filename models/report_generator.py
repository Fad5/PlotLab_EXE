from docxtpl import DocxTemplate, InlineImage
from docx.shared import Cm
import datetime
from pathlib import Path

class VibraTableReportGenerator:
    def __init__(self):
        self.data = datetime.datetime.now().strftime('%Y-%m-%d')

    def transform_date(self):
        months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
               '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
        year, month, day = self.data.split('-')
        return f'¬´{day}¬ª {months[int(month)-1]} {year}'

    def number_protocol(self):
        year, month, day = self.data.split('-')
        return f'–î–°-0{month}-{year}-'

    def safe_image(self, path_, width, doc, savedir):
        savedir = Path(savedir)
        path = savedir / path_
        if not path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            return ""
        try:
            return InlineImage(doc, str(path), width=width)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return ""

    def generate_report(self, name, a, b, h, savedir):
        template_path = Path(__file__).parent.parent / 'VibraTable_Template_DS.docx'
        print(f"üîç –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É: {template_path.resolve()}")

        if not template_path.exists():
            raise FileNotFoundError(f"üö® –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")

        try:
            doc = DocxTemplate(template_path)
            print("‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            raise Exception(f"üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

        context = {
            'name': name,
            'test_date': self.transform_date(),
            'a': a,
            'b': b,
            'h': h,
            'num_protocol': self.number_protocol(),
            'load_pic': self.safe_image('–î–µ—Ñ–æ—Ä–º–∞—Ü–∏—è_–≤–æ_–≤—Ä–µ–º–µ–Ω–∏.png', Cm(14), doc, savedir),
            'cycles_pic': self.safe_image('–ü–æ–ª–Ω—ã–µ_–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.png', Cm(14), doc, savedir),
            'elastic_pic': self.safe_image('–û—Å–Ω–æ–≤–Ω—ã–µ_–≥—Ä–∞—Ñ–∏–∫–∏.png', Cm(14), doc, savedir)
        }

        try:
            doc.render(context)
            output_path = Path(savedir) / '003.docx'
            doc.save(output_path)
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
            return output_path
        except Exception as e:
            raise Exception(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")